type: edu
custom_name: stage4
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        String string;
        TestClue(String s) {
            string = s;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue("take\n"))
                    .setInput("take\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n1\n"))
                    .setInput("buy\n1\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n2\n"))
                    .setInput("buy\n2\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n3\n"))
                    .setInput("buy\n3\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("fill\n2001\n510\n101\n21\n"))
                    .setInput("fill\n2001\n510\n101\n21\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.trim().split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            String[] clueLines = clue.string.trim().split("\\n");
            String action = clueLines[0].trim();

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0].replace("$", "");
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }


            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            if (water0 != 400 || milk0 != 540 || beans0 != 120
                || cups0 != 9 || money0 != 550) {
                return new CheckResult(false,
                    "Initial setup is wrong: " +
                        "coffee machine should fe filled like " +
                        "stated in the description");
            }

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            if (action.equals("take")) {

                if (diffMilk != 0) {
                    return new CheckResult(false,
                        "After \"take\" action milk " +
                            "amount shouldn't be changed");
                }

                if (diffWater != 0) {
                    return new CheckResult(false,
                        "After \"take\" action water " +
                            "amount shouldn't be changed");
                }

                if (diffBeans != 0) {
                    return new CheckResult(false,
                        "After \"take\" action beans " +
                            "amount shouldn't be changed");
                }

                if (diffCups != 0) {
                    return new CheckResult(false,
                        "After \"take\" action cups " +
                            "amount shouldn't be changed");
                }

                if (money1 != 0) {
                    return new CheckResult(false,
                        "After \"take\" action money " +
                            "amount should be zero");
                }

                return CheckResult.correct();
            }

            else if (action.equals("buy")) {

                String option = clueLines[1].trim();

                if (option.equals("1")) {

                    if (diffWater != -250) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "water amount should be lowered by 250");
                    }

                    if (diffMilk != 0) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "milk amount should not be changed");
                    }

                    if (diffBeans != -16) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "beans amount should be lowered by 16");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 4) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "money amount should be increased by 4");
                    }

                    return CheckResult.correct();

                }

                else if (option.equals("2")) {

                    if (diffWater != -350) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "water amount should be lowered by 350");
                    }

                    if (diffMilk != -75) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "milk amount should be lowered by 75");
                    }

                    if (diffBeans != -20) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "beans amount should be lowered by 20");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 7) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "money amount should be increased by 7");
                    }

                    return CheckResult.correct();
                }

                else if (option.equals("3")) {

                    if (diffWater != -200) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "water amount should be lowered by 350");
                    }

                    if (diffMilk != -100) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "milk amount should be lowered by 75");
                    }

                    if (diffBeans != -12) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "beans amount should be lowered by 20");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 6) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "money amount should be increased by 7");
                    }

                    return CheckResult.correct();
                }
            }

            else if (action.equals("fill")) {

                int water_ = Integer.parseInt(clueLines[1]);
                int milk_ = Integer.parseInt(clueLines[2]);
                int beans_ = Integer.parseInt(clueLines[3]);
                int cups_ = Integer.parseInt(clueLines[4]);

                if (diffMoney != 0) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "money amount should not be changed");
                }

                if (diffWater != water_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "water amount expected to be increased by " + water_ +
                            " but was increased by " + diffWater);
                }

                if (diffMilk != milk_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "milk amount expected to be increased by " + milk_ +
                            " but was increased by " + diffMilk);
                }

                if (diffBeans != beans_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "beans amount expected to be increased by " + beans_ +
                            " but was increased by " + diffBeans);
                }

                if (diffCups != cups_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "cups amount expected to be increased by " + cups_ +
                            " but was increased by " + diffCups);
                }


                return CheckResult.correct();

            }

            throw new RuntimeException("Can't check the answer");
        }
    }
  learner_created: false
- name: src/app/Main.java
  visible: true
  text: |-
    package app;

    public class Main {

        public static void main(String[] args) {
            CoffeeMachineApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/app/CoffeeMachineApplication.java
  visible: true
  text: |-
    package app;

    import machine.CoffeeMachine;
    import machine.Machine;
    import machine.MachineStore;
    import model.CoffeeMachineStore;
    import service.coffeeCalculable.CoffeeBeansBasedCalculator;
    import service.coffeeCalculable.ItemsCalculator;
    import service.coffeeCalculable.MilkBasedCalculator;
    import service.coffeeCalculable.WaterBasedCalculator;
    import service.ingredientCalculable.Calculable;
    import service.machineStoreCalculable.MachineStoreCalculable;
    import service.resourceBundle.CustomizedResourceBundle;
    import util.ResourceBundleUtil;

    import java.util.Scanner;

    import static app.Constants.*;

    public class CoffeeMachineApplication {

        private static CustomizedResourceBundle resourceBundle;
        private static Scanner reader;
        private static Machine machine;

        public static void run(Class<?> clazz, String[] args) {
            init();
            int neededCoffeeCups = prompt(PROMPT_CUPS);
            String response = machine.getResponse(neededCoffeeCups);
            System.out.println(response);
        }

        /**
         * Initialize Application
         */
        private static void init() {
            resourceBundle = ResourceBundleUtil.getResourceBundle();
            reader = new Scanner(System.in);
            initCoffeeMachine();
        }

        /**
         * Initialize the coffee machine with needed ingredient
         */
        private static void initCoffeeMachine() {
            MachineStore machineStore = getCoffeeMachineStore();
            MachineStoreCalculable machineStoreCalculable = getMachineStoreCalculableService();
            machine = getCoffeeMachine(machineStore, machineStoreCalculable);
        }

        private static MachineStore getCoffeeMachineStore() {
            int water = prompt(PROMPT_INGREDIENT, resourceBundle.get(UNIT_VOLUME), resourceBundle.get(WATER));
            int milk = prompt(PROMPT_INGREDIENT, resourceBundle.get(UNIT_VOLUME), resourceBundle.get(MILK));
            int coffeeBeans = prompt(PROMPT_INGREDIENT, resourceBundle.get(UNIT_MASS), resourceBundle.get(COFFEE_BEANS));
            return new CoffeeMachineStore(water, milk, coffeeBeans);
        }

        private static MachineStoreCalculable getMachineStoreCalculableService() {
            final Calculable waterBasedCalculator = getWaterBasedCalculator();
            final Calculable milkBasedCalculator = getMilkBasedCalculator();
            final Calculable coffeeBeansBasedCalculator = getCoffeeBeansBasedCalculator();
            return new ItemsCalculator(waterBasedCalculator, milkBasedCalculator, coffeeBeansBasedCalculator);
        }

        private static Calculable getCoffeeBeansBasedCalculator() {
            return new CoffeeBeansBasedCalculator();
        }

        private static Calculable getMilkBasedCalculator() {
            return new MilkBasedCalculator();
        }

        private static Calculable getWaterBasedCalculator() {
            return new WaterBasedCalculator();
        }

        private static Machine getCoffeeMachine(MachineStore machineStore, MachineStoreCalculable machineStoreCalculable) {
            return new CoffeeMachine(machineStore, machineStoreCalculable);
        }

        /**
         * @param key    key mapped to message in properties file that explain what the user MUST be enter as input
         * @param params params to get a customized message
         * @return see {@link Scanner#nextInt()} return
         */
        private static int prompt(String key, Object... params) {
            System.out.println(resourceBundle.get(key, params));
            return reader.nextInt();
        }
    }
  learner_created: false
- name: src/main/resources/config.properties
  visible: true
  text: properties.filename=app
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    application {
        mainClassName = 'app.Main'
    }
  learner_created: false
- name: src/main/resources/app.properties
  visible: true
  text: |-
    # Units
    unit.volume=ml
    unit.mass=grams
    # Ingredient
    ingredient.water=water
    ingredient.milk=milk
    ingredient.coffeeBeans=coffee beans
    # Prompt
    prompt.ingredient=Write how many {0} of {1} the coffee machine has:
    prompt.cups=Write how many cups of coffee you will need:
    # Response
    response.success.ICan=Yes, I can make that amount of coffee
    response.success.ICanDoMore=Yes, I can make that amount of coffee (and even {0} more than that)
    response.failure.ICannot=No, I can make only {0} cup(s) of coffee
  learner_created: false
- name: src/constants/properites/Ingredients.java
  visible: true
  learner_created: true
- name: src/constants/properites/Prompts.java
  visible: true
  learner_created: true
- name: src/constants/properites/Units.java
  visible: true
  learner_created: true
- name: src/constants/attributeKeys/Ingredients.java
  visible: true
  learner_created: true
- name: src/constants/attributeKeys/Items.java
  visible: true
  learner_created: true
- name: src/modelservices/resourceBundle/CustomizedResourceBundle.java
  visible: true
  text: |-
    package service.resourceBundle;

    import model.ResourceBundleFile;

    import java.text.MessageFormat;
    import java.util.Collections;
    import java.util.Enumeration;
    import java.util.ResourceBundle;

    public class CustomizedResourceBundle extends ResourceBundle {

        private final ResourceBundleFile resourceBundleFile;

        public CustomizedResourceBundle(ResourceBundleFile resourceBundleFile) {
            this.resourceBundleFile = resourceBundleFile;
        }

        private ResourceBundle getResourceBundle() {
            return ResourceBundle.getBundle(resourceBundleFile.getFilename(), resourceBundleFile.getLocale());
        }

        public String get(String key, Object... args) {
            return MessageFormat.format(getResourceBundle().getString(key), args);
        }

        @Override
        protected Object handleGetObject(String key) {
            ResourceBundle resourceBundle = getResourceBundle();
            return resourceBundle != null ? resourceBundle.getString(key) : null;
        }

        @Override
        public Enumeration<String> getKeys() {
            ResourceBundle resourceBundle = getResourceBundle();
            return resourceBundle != null ? resourceBundle.getKeys() : Collections.emptyEnumeration();
        }
    }
  learner_created: false
- name: src/modelservices/IO/Reader.java
  visible: true
  learner_created: true
- name: src/models/ResourceBundleFile.java
  visible: true
  text: |-
    package model;

    import java.util.Locale;

    public class ResourceBundleFile {

        private final String filename;
        private final Locale locale;

        public ResourceBundleFile(String filename, Locale locale) {
            this.filename = filename;
            this.locale = locale;
        }

        public String getFilename() {
            return filename;
        }

        public Locale getLocale() {
            return locale;
        }
    }
  learner_created: false
- name: src/models/Item.java
  visible: true
  learner_created: true
- name: src/models/Key.java
  visible: true
  learner_created: true
- name: src/utils/ResourceBundleUtil.java
  visible: true
  text: |-
    package util;

    import model.ResourceBundleFile;
    import service.resourceBundle.CustomizedResourceBundle;

    import java.util.Locale;
    import java.util.ResourceBundle;

    public class ResourceBundleUtil {

        private static final ResourceBundle CONFIG_RESOURCE_BUNDLE = ResourceBundle.getBundle("config");
        private static final String APP_PROPERTIES_FILENAME = CONFIG_RESOURCE_BUNDLE.getString("properties.filename");

        public static CustomizedResourceBundle getResourceBundle() {
            ResourceBundleFile resourceBundleFile = getResourceBundleFile();
            return new CustomizedResourceBundle(resourceBundleFile);
        }

        private static ResourceBundleFile getResourceBundleFile() {
            return new ResourceBundleFile(APP_PROPERTIES_FILENAME, Locale.getDefault());
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/178/implement
status: Failed
feedback:
  message: "Exception in test #1\n\nProbably you have nextInt() (or similar Scanner\
    \ method) followed by nextLine() - in this situation nextLine() often gives an\
    \ empty string and another one nextLine() call gives correct string.\n\njava.util.InputMismatchException\n\
    \tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\
    \tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\
    \tat services.IO.Reader.prompt(Reader.java:24)\n\tat app.CoffeeMachineApplication.populateStorage(CoffeeMachineApplication.java:66)\n\
    \tat app.CoffeeMachineApplication.getCoffeeMachineStore(CoffeeMachineApplication.java:61)\n\
    \tat app.CoffeeMachineApplication.initCoffeeMachine(CoffeeMachineApplication.java:55)\n\
    \tat app.CoffeeMachineApplication.init(CoffeeMachineApplication.java:48)\n\tat\
    \ app.CoffeeMachineApplication.run(CoffeeMachineApplication.java:35)\n\tat app.Main.main(Main.java:6)\n\
    \nPlease find below the output of your program during this failed test.\nNote\
    \ that the &#39;&gt;&#39; character indicates the beginning of the input line.\n\
    \n---\n\nWrite how many ml of water the coffee machine has:\n&gt; take"
  time: Thu, 16 Jul 2020 04:04:25 UTC
record: 3
