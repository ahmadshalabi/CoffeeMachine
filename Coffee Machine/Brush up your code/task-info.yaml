type: edu
custom_name: stage6
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |-
    package machine;

    import service.coffeeCalculable.ProducibleItemsCalculator;
    import service.machineStoreCalculable.MachineStoreCalculable;

    public class CoffeeMachine extends AbstractMachine {

        private MachineStoreCalculable producibleItemsCalculator;

        public CoffeeMachine(MachineStore machineStore) {
            super(machineStore);
            initServices();
        }

        private void initServices() {
            producibleItemsCalculator = new ProducibleItemsCalculator();
        }

        /**
         * @return coffee machine status based on needed and available coffee cups
         */
        @Override
        public String getResponse(int neededCoffeeCups) {
            int availableCoffeeCups = producibleItemsCalculator.execute(machineStore);
            String response;
            if (availableCoffeeCups == neededCoffeeCups) {
                response = "Yes, I can make that amount of coffee";
            } else if (availableCoffeeCups < neededCoffeeCups) {
                response = String.format("No, I can make only %d cup(s) of coffee%n", availableCoffeeCups);
            } else {
                response = String.format("Yes, I can make that amount of coffee (and even %d more than that)", availableCoffeeCups - neededCoffeeCups);
            }
            return response;
        }
    }
  learner_created: false
- name: src/CoffeeMachineApplication.java
  visible: true
  text: |-
    import machine.CoffeeMachine;
    import machine.CoffeeMachineStore;
    import machine.Machine;
    import machine.MachineStore;

    import java.util.Scanner;

    public class CoffeeMachineApplication {

        private static Scanner reader;
        private static Machine machine;

        public static void run(Class clazz, String[] args) {
            init();
            int neededCoffeeCups = prompt("Write how many cups of coffee you will need:");
            String response = machine.getResponse(neededCoffeeCups);
            System.out.println(response);
        }

        /**
         * Initialize Application
         */
        private static void init() {
            initReader();
            initCoffeeMachine();
        }

        /**
         * Initialize Input Reader
         */
        private static void initReader() {
            reader = new Scanner(System.in);
        }

        /**
         * Initialize the coffee machine with water, milk and coffee beans
         */
        private static void initCoffeeMachine() {
            int water = prompt("Write how many ml of water the coffee machine has:");
            int milk = prompt("Write how many ml of milk the coffee machine has:");
            int coffeeBeans = prompt("Write how many grams of coffee beans the coffee machine has:");
            MachineStore machineStore = new CoffeeMachineStore(water, milk, coffeeBeans);
            machine = new CoffeeMachine(machineStore);
        }

        /**
         * @param msg message explain what the user MUST be enter as input
         * @return see {@link Scanner#nextInt()} return
         */
        private static int prompt(String msg) {
            System.out.println(msg);
            return reader.nextInt();
        }
    }
  learner_created: false
- name: src/Main.java
  visible: true
  text: |-
    public class Main {

        public static void main(String[] args) {
            CoffeeMachineApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/machine/Machine.java
  visible: true
  text: |-
    package machine;

    public interface Machine {

        /**
         * @param neededItems user needed Items
         * @return implementation specific response
         */
        String getResponse(int neededItems);
    }
  learner_created: false
- name: src/machine/CoffeeMachineStore.java
  visible: true
  text: |-
    package machine;

    public class CoffeeMachineStore implements MachineStore {

        private final int milk;
        private final int coffeeBeans;
        private final int water;

        public CoffeeMachineStore(int milk, int coffeeBeans, int water) {
            this.milk = milk;
            this.coffeeBeans = coffeeBeans;
            this.water = water;
        }

        public int getMilk() {
            return milk;
        }

        public int getCoffeeBeans() {
            return coffeeBeans;
        }

        public int getWater() {
            return water;
        }
    }
  learner_created: false
- name: src/machine/MachineStore.java
  visible: true
  text: |-
    package machine;

    public interface MachineStore {
    }
  learner_created: false
- name: src/machine/AbstractMachine.java
  visible: true
  text: |-
    package machine;

    public abstract class AbstractMachine implements Machine {

        protected MachineStore machineStore;

        public AbstractMachine(MachineStore machineStore) {
            this.machineStore = machineStore;
        }
    }
  learner_created: false
- name: src/service/coffeeCalculable/WaterBasedCalculator.java
  visible: true
  text: |-
    package service.coffeeCalculable;

    import service.ingredientCalculable.Calculable;

    public class WaterBasedCalculator implements Calculable {
        private static final int WATER_PER_ITEM = 200;

        @Override
        public int execute(int capacity) {
            return capacity / WATER_PER_ITEM;
        }
    }
  learner_created: false
- name: src/service/coffeeCalculable/ProducibleItemsCalculator.java
  visible: true
  text: |-
    package service.coffeeCalculable;

    import machine.CoffeeMachineStore;
    import machine.MachineStore;
    import service.ingredientCalculable.Calculable;
    import service.machineStoreCalculable.MachineStoreCalculable;

    import java.util.ArrayList;
    import java.util.Comparator;
    import java.util.List;

    public class ProducibleItemsCalculator implements MachineStoreCalculable {

        private final Calculable waterBasedCalculator = new WaterBasedCalculator();
        private final Calculable milkBasedCalculator = new MilkBasedCalculator();
        private final Calculable coffeeBeansBasedBasedCalculator = new CoffeeBeansBasedCalculator();

        @Override
        public int execute(MachineStore machineStore) {
            CoffeeMachineStore coffeeStore = (CoffeeMachineStore) machineStore;
            List<Integer> ingredientBasedProducibleItems = new ArrayList<>(3);
            ingredientBasedProducibleItems.add(getProducibleItems(waterBasedCalculator, coffeeStore.getWater()));
            ingredientBasedProducibleItems.add(getProducibleItems(milkBasedCalculator, coffeeStore.getMilk()));
            ingredientBasedProducibleItems.add(getProducibleItems(coffeeBeansBasedBasedCalculator, coffeeStore.getCoffeeBeans()));
            return ingredientBasedProducibleItems.stream()
                    .min(Comparator.naturalOrder())
                    .orElse(0);
        }

        private int getProducibleItems(Calculable calculable, int ingredient) {
            return calculable.execute(ingredient);
        }
    }
  learner_created: false
- name: src/service/ingredientCalculable/Calculable.java
  visible: true
  text: |-
    package service.ingredientCalculable;

    public interface Calculable {

        /**
         * @param capacity Ingredient capacity/size in a specified unit
         * @return implementation depended value
         */
        int execute(int capacity);
    }
  learner_created: false
- name: src/service/machineStoreCalculable/MachineStoreCalculable.java
  visible: true
  text: |-
    package service.machineStoreCalculable;

    import machine.MachineStore;

    public interface MachineStoreCalculable {

        /**
         * @param machineStore machine store
         * @return implementation depended value
         */
        int execute(MachineStore machineStore);
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/180/implement
status: Unchecked
record: -1
