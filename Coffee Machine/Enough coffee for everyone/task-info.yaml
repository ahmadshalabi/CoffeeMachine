type: edu
custom_name: stage3
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;

    import java.util.List;


    class TestClue {
        boolean cond;
        int num;
        boolean showTests;
        TestClue(boolean c, int n, boolean showTests) {
            cond = c;
            num = n;
            this.showTests = showTests;
        }
    }

    public class CoffeeMachineTest extends BaseStageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 0, true))
                    .setInput("300\n65\n111\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 2, true))
                    .setInput("600\n153\n100\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 2, true))
                    .setInput("1400\n150\n100\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 2, true))
                    .setInput("1400\n1500\n45\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 2, true))
                    .setInput("599\n250\n200\n10"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 867, true))
                    .setInput( "345640\n43423\n23234\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 1548, true))
                    .setInput("345640\n434230\n23234\n19246"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 172, true))
                    .setInput( "34564\n43423\n23234\n19246"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 0, false))
                    .setInput("399\n112\n111\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 3, false))
                    .setInput("2400\n249\n100\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 1, false))
                    .setInput("1400\n1500\n44\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 2, false))
                    .setInput("500\n250\n200\n10"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 171, false))
                    .setInput("34564\n43423\n23234\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(true, 1547, false))
                    .setInput("345640\n434230\n23234\n1"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(false, 868, false))
                    .setInput("345640\n43423\n23234\n19246")

            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.trim().split(":");
            String userOutput = lines[lines.length - 1].trim();
            String loweredOutput = userOutput.toLowerCase();
            boolean ans = clue.cond;
            int amount = clue.num;
            if (ans && loweredOutput.contains("yes")) {
                if (amount > 0) {
                    boolean isCorrect = loweredOutput.contains(Integer.toString(amount));
                    if (isCorrect) {
                        return CheckResult.TRUE;
                    } else {

                        String rightOutput =
                            "Yes, I can make that amount of coffee" +
                                " (and even " + amount + " more than that)";

                        if (clue.showTests) {
                            return new CheckResult(false,
                                "Your output:\n" +
                                    userOutput +
                                    "\nRight output:\n" +
                                    rightOutput);
                        } else {
                            return CheckResult.FALSE;
                        }
                    }
                }
                return CheckResult.TRUE;
            } else {
                boolean cond1 = loweredOutput.contains("no");
                boolean cond2 = loweredOutput.contains(Integer.toString(amount));

                if (cond1 && cond2) {
                    return CheckResult.TRUE;
                } else {

                    String rightOutput = "No, I can make only " +
                        amount +" cup(s) of coffee";

                    if (clue.showTests) {
                        return new CheckResult(false,
                            "Your output:\n" +
                            userOutput +
                            "\nRight output:\n" +
                            rightOutput);
                    } else {
                        return CheckResult.FALSE;
                    }
                }
            }
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: src/app/Main.java
  visible: true
  learner_created: true
- name: src/machine/Machine.java
  visible: true
  learner_created: true
- name: src/service/coffeeCalculable/WaterBasedCalculator.java
  visible: true
  learner_created: true
- name: src/util/ResourceBundleUtil.java
  visible: true
  learner_created: true
- name: src/app/CoffeeMachineApplication.java
  visible: true
  learner_created: true
- name: src/app/Constants.java
  visible: true
  learner_created: true
- name: src/service/machineStoreCalculable/MachineStoreCalculable.java
  visible: true
  learner_created: true
- name: src/service/ingredientCalculable/Calculable.java
  visible: true
  learner_created: true
- name: src/main/resources/config.properties
  visible: true
  learner_created: true
- name: src/machine/Constants.java
  visible: true
  learner_created: true
- name: build.gradle
  visible: true
  learner_created: true
- name: src/machine/AbstractMachine.java
  visible: true
  learner_created: true
- name: src/main/resources/app.properties
  visible: true
  learner_created: true
- name: src/service/resourceBundle/CustomizedResourceBundle.java
  visible: true
  learner_created: true
- name: src/machine/MachineStore.java
  visible: true
  learner_created: true
- name: src/service/coffeeCalculable/ProducibleItemsCalculator.java
  visible: true
  learner_created: true
- name: src/model/CoffeeMachineStore.java
  visible: true
  learner_created: true
- name: src/service/coffeeCalculable/ItemsCalculator.java
  visible: true
  learner_created: true
- name: src/model/ResourceBundleFile.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/177/implement
status: Failed
feedback:
  message: "Fatal error in test #1, please send the report to support@hyperskill.org\n\
    \nOS Linux\nJava 11.0.7\nVendor Oracle Corporation\nTesting library version 7\n\
    \norg.hyperskill.hstest.exception.outcomes.FatalError: No main method found\n\t\
    at org.hyperskill.hstest.common.ReflectionUtils.getMainMethod(ReflectionUtils.java:18)\n\
    \tat org.hyperskill.hstest.testing.TestedProgram.&lt;init&gt;(TestedProgram.java:51)\n\
    \tat org.hyperskill.hstest.dynamic.input.DynamicTesting.lambda$toDynamicTesting$0(DynamicTesting.java:118)\n\
    \tat org.hyperskill.hstest.testing.runner.AsyncMainMethodRunner.lambda$runMain$0(AsyncMainMethodRunner.java:30)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:834)"
  time: Wed, 15 Jul 2020 14:19:07 UTC
record: 1
